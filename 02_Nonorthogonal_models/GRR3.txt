###########################################################
# from expression (3)

BetaK = function(X,Y,Gamma,K){ 
	B1 = crossprod(X) + Gamma%*%K%*%t(Gamma)
	B2 = t(X)%*%Y
	B = solve(B1)%*%B2
	return(B)
}

###########################################################
# from expression (14)

MSE = function(L_l,k_l,zeta_l,sigma2,Landa){
	MSE1 = (sigma2*L_l+(k_l^2)*(zeta_l^2))/((L_l+k_l)^2)
	MSE2 = sum(1/Landa) - 1/L_l
	MSE = MSE1 + sigma2*MSE2
	return(MSE)
}

###########################################################
# from expression (21)

R2 = function(Y,delta_l,L_l,k_l,sigma2,Landa,delta){
	R21 = ((delta_l^2)*(L_l+2*k_l))/((L_l+k_l)^2)
	R22 = sum(delta^2/Landa) - (delta_l^2)/L_l
	R2 = (1/crossprod(Y))*(R21 + R22)
	return(R2)
}

###########################################################
###########################################################
# from expression (5)

BetaKbis = function(Gamma,Omega,delta){ 
	B = Gamma%*%Omega%*%delta
	return(B)
}

###########################################################
# from expression (10) and (11)

MSEbis = function(Psi,sigma2,zeta,Teta){
	MSE1 = sigma2*sum(diag(Psi))
	MSE2 = t(zeta)%*%Teta%*%zeta
	MSE = MSE1 + MSE2
	return(MSE)
}

###########################################################
# from expression (16)

R2bis = function(Y,delta,Xi){
	R21 = t(delta)%*%Xi%*%delta
	R22 = crossprod(Y)
	R2 = R21/R22
	return(R2)
}

###########################################################
###########################################################

GRR = function(Gamma,Landa,K,delta,p,sigma2,zeta,Y){
	# estimation
		Omega = solve(Landa+K)
		Beta_K = BetaKbis(Gamma,Omega,delta)
	# mean square error
		Psi = Omega%*%Landa%*%Omega
		I = diag(1,p)
		Teta = (Omega%*%Landa-I)%*%(Omega%*%Landa-I)
		MSE_K = MSEbis(Psi,sigma2,zeta,Teta)
	# goodness of fit
		Xi = Omega%*%(Landa+2*K)%*%Omega
		R2_K = R2bis(Y,delta,Xi)
	# results
		r = list(Beta_K, MSE_K, R2_K)
		names(r) = c("Estimation", "Mean Square Error", "Goodness of Fit")
		return(r)
}


###########################################################
###########################################################

kmin_calculation = function(leap,p,Landa,K,sigma2,xi){
    j = 1 
    discr = seq(0,1,leap)
    mses = array(, length(discr))
    for (k in discr){ # Algorithm 1: Obtention of the k, k_min, that minimizes MSE
      K = diag(k,p)
      Omega = solve(Landa+K)
      Psi = Omega%*%Landa%*%Omega
      I = diag(1,p)
      Teta = (Omega%*%Landa-I)%*%(Omega%*%Landa-I)
      mses[j] = MSEbis(Psi,sigma2,xi,Teta)
      if (j > 1){
        if(mses[j]>mses[j-1]){
          k_minimum = j-1
          break
        }
      }
      j = j + 1
    }
    k_minimum = discr[k_minimum]
    return(k_minimum)
}

###########

kl_calculation = function(sigma2,xi,p,Gamma,Landa,K_mins,delta,Y){ 
    k_mins = sigma2/xi^2
    #	
    MSEs_min = array(,p)
    var = 0
    for (k_l in k_mins){
      var = var + 1
      ks = array(0, p)
      ks[var] = k_l
      K_mins = diag(ks)
      GRRs = GRR(Gamma,Landa,K_mins,delta,p,sigma2,xi,Y)
      MSEs_min[var] = GRRs[[2]]
    }
    #
    cond = xi^2 - sigma2/diag(Landa) < 0 
    #
    output = data.frame(k_mins, MSEs_min, cond) 
    return(output)
}

###########

GRR_bootstrap_fixed = function(dep_est, e, indep, ite,n,p,beta,K,seed,estimation=1,option=1){
	boots = matrix(, ite, p)
	GoFs = matrix(, ite, 1)
	set.seed(seed)
	########## fixed bootstrap
	for (i in 1:ite){
	  s = sample(1:n, n, replace=T)
	  l = 1
	  Yb = matrix(, n, 1)
	  for (j in s) {
	        Yb[l] = dep_est[l] + e[j]
	        l = l + 1
	  }
	  XX = crossprod(X)
	  descomposition = eigen(XX)
	  Landa = diag(descomposition[[1]])
	  Gamma = descomposition[[2]]
	  alfa = t(X)%*%Yb
	  delta = t(Gamma)%*%alfa
	  xi = t(Gamma)%*%beta
	  Omega = solve(Landa+K)
	  Xi = Omega%*%(Landa+2*K)%*%Omega
	  if (estimation==1) boots[i,] = as.matrix(BetaK(X,Yb,Gamma,K))
	  if (estimation!=1) boots[i,] = as.matrix(BetaKbis(Gamma,Omega,delta))
	  GoFs[i] = R2bis(Yb,delta,Xi)
	} 
	########## BETA
		# punctual estimation
			beta = colMeans(boots)
			desv.tips = numeric()
			for (i in 1:p) desv.tips[i] = sd(boots[,i])
		# interval estimation
		    # type 1    
			    int1low = matrix(, p, 1)
			    int1top = matrix(, p, 1)
			    for (i in 1:p){
			      int1low[i] = quantile(boots[,i], prob=0.025)
			      int1top[i] = quantile(boots[,i], prob=0.975)
			    }
		    # type 2    
			    int2low = array(,p)
			    int2top = array(,p)
			    for (i in 1:p){
			      int2low[i] = mean(boots[,i])-1.96*sd(boots[,i])
			      int2top[i] = mean(boots[,i])+1.96*sd(boots[,i])
			    }    
	########## GoF
		gof = mean(GoFs)
		gof_sd = sd(GoFs)
    		intBA1 = c(quantile(GoFs, prob=0.025), quantile(GoFs, prob=0.975))
		intBA2 = c(mean(GoFs)-1.96*sd(GoFs), mean(GoFs)+1.96*sd(GoFs))
	########## output
	if (option==1) {
		output = matrix( , ncol=2, nrow=p+1)
		output[1:p,1] = int1low
		output[1:p,2] = int1top
		output[p+1,1] = intBA1[1]
		output[p+1,2] = intBA1[2]
		rows = "Beta 1"
		for (i in 2:p) rows = c(rows, paste("Beta", i))
		rows = c(rows, "GoF")
		rownames(output) = rows
		columns = c("Inf (P)", "Sup (P)")
		colnames(output) = columns
	} else {
		output = matrix( , ncol=6, nrow=p+1)
		output[1:p,1] = beta
		output[1:p,2] = desv.tips
		output[1:p,3] = int1low
		output[1:p,4] = int1top
		output[1:p,5] = int2low
		output[1:p,6] = int2top
		output[p+1,1] = gof
		output[p+1,2] = gof_sd
		output[p+1,3] = intBA1[1]
		output[p+1,4] = intBA1[2]
		output[p+1,5] = intBA2[1]
		output[p+1,6] = intBA2[2]
		rows = "Beta 1"
		for (i in 2:p) rows = c(rows, paste("Beta", i))
		rows = c(rows, "GoF")
		rownames(output) = rows
		columns = c("Beta Est.", "Desv.Stand. Est.", "Inf (P)", "Sup (P)", "Inf (SD)", "Sup (SD)")
		colnames(output) = columns
	}
	return(output)
}

###########

standardize <- function(X){
  observaciones = dim(X)[1]
  variables = dim(X)[2]
  
  Xstand=array(,c(observaciones,variables))
  for (i in 1:variables) {
    for (j in 1:observaciones) {
      Xstand[j,i] = (X[j,i] - mean(X[,i]))/sqrt((observaciones-1)*var(X[,i]))
    }
  }
  return(Xstand)
}
